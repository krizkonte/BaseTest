# Plano de Implementa√ß√£o: NavigationMenu Component

## üìã Vis√£o Geral

Este documento detalha a implementa√ß√£o de um componente NavigationMenu seguindo os padr√µes estabelecidos no projeto BaseTest, baseado no Base UI NavigationMenu com melhorias de DX, acessibilidade e integra√ß√£o com o sistema de design.

## üéØ Objetivos

- Criar um NavigationMenu reutiliz√°vel e acess√≠vel
- Seguir os padr√µes de composi√ß√£o dos componentes existentes
- Integrar com o sistema de design (surface, typo, etc.)
- Manter consist√™ncia com Field.tsx e estrutura de pastas
- Oferecer flexibilidade m√°xima para customiza√ß√£o

## üìÅ Estrutura de Arquivos

```
app/components/custom/navigation-menu/
‚îú‚îÄ‚îÄ NavigationMenu.tsx          # Componente principal
‚îú‚îÄ‚îÄ NavigationMenuTrigger.tsx   # Trigger com √≠cones e estados
‚îú‚îÄ‚îÄ NavigationMenuContent.tsx   # Conte√∫do do submenu
‚îú‚îÄ‚îÄ NavigationMenuLink.tsx      # Links do submenu
‚îî‚îÄ‚îÄ index.tsx                   # Re-exports

app/components/base/NavigationMenu.tsx  # Re-exports para uso
```

## üîç An√°lise Cr√≠tica do Exemplo Original

### ‚ùå Problemas Identificados

1. **Componente monol√≠tico**: Arquivo muito grande (200+ linhas)
2. **Inconsist√™ncia com padr√µes**: N√£o usa `useRender` e `mergeProps`
3. **CVA mal estruturado**: Variantes n√£o seguem padr√µes do projeto
4. **Falta de composi√ß√£o**: N√£o permite customiza√ß√£o via `render` prop
5. **Acessibilidade incompleta**: Falta atributos ARIA importantes
6. **Estrutura r√≠gida**: Dif√≠cil de customizar e estender

### ‚úÖ Melhorias Propostas

1. **Composi√ß√£o modular**: Componentes separados por responsabilidade
2. **Padr√µes consistentes**: Usar `useRender`, `mergeProps`, `useForceActive`
3. **CVA bem estruturado**: Seguir padr√µes dos componentes existentes
4. **Flexibilidade total**: Suporte a `render` prop e customiza√ß√£o
5. **Acessibilidade completa**: Atributos ARIA autom√°ticos
6. **Integra√ß√£o com sistema**: Usar classes do design system

## üèóÔ∏è Implementa√ß√£o dos Componentes

### 1. NavigationMenu.tsx (Principal)

```typescript
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { NavigationMenu as BaseNavigationMenu } from "@base-ui-components/react/navigation-menu";
import { useRender } from "@base-ui-components/react/use-render";
import { mergeProps } from "@base-ui-components/react/merge-props";

const navigationMenuVariants = cva("", {
  variants: {
    variant: {
      default: "surface brand",
      outline: "ghost border-surface border-thin",
      ghost: "ghost",
    },
    size: {
      sm: "h-6 px-2 text-sm",
      md: "h-8 px-3 text-base",
      lg: "h-10 px-4 text-lg",
    },
    orientation: {
      horizontal: "flex-row",
      vertical: "flex-col",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "md",
    orientation: "horizontal",
  },
});

export interface NavigationMenuProps extends VariantProps<typeof navigationMenuVariants> {
  render?: React.ReactElement | ((props: any) => React.ReactElement);
  as?: React.ElementType;
  className?: string;
  children?: React.ReactNode;
  delay?: number;
  closeDelay?: number;
  onValueChange?: (value: any, event?: Event, reason?: any) => void;
} & Omit<React.ComponentProps<typeof BaseNavigationMenu.Root>, "className">;

const NavigationMenu = React.forwardRef<HTMLElement, NavigationMenuProps>(
  ({ 
    className, 
    render, 
    as, 
    children, 
    variant,
    size,
    orientation,
    delay = 50,
    closeDelay = 50,
    onValueChange,
    ...props 
  }, ref) => {
    const DefaultElement = as || "nav";

    const defaultProps = {
      ref,
      delay,
      closeDelay,
      orientation,
      onValueChange,
      children,
    };

    const element = useRender({
      render: render || React.createElement(DefaultElement),
      props: mergeProps(defaultProps, { className, ...props }),
    });

    return (
      <BaseNavigationMenu.Root
        ref={ref}
        delay={delay}
        closeDelay={closeDelay}
        orientation={orientation}
        onValueChange={onValueChange}
        {...props}
      >
        {children}
      </BaseNavigationMenu.Root>
    );
  }
);
NavigationMenu.displayName = "NavigationMenu";

export { NavigationMenu };
export type { NavigationMenuProps };
```

### 2. NavigationMenuTrigger.tsx

```typescript
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { NavigationMenu as BaseNavigationMenu } from "@base-ui-components/react/navigation-menu";
import { useRender } from "@base-ui-components/react/use-render";
import { mergeProps } from "@base-ui-components/react/merge-props";
import { useForceActive } from "../../../lib/useForceActive";
import { Icon } from "../Icon";
import type { LucideIcon } from "lucide-react";

const triggerVariants = cva("foundation-button interactive font-medium rounded-md flex items-center gap-x-2", {
  variants: {
    variant: {
      default: "surface brand",
      outline: "ghost border-surface border-thin",
      ghost: "ghost",
    },
    size: {
      sm: "h-6 px-2 text-sm",
      md: "h-8 px-3 text-base",
      lg: "h-10 px-4 text-lg",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "md",
  },
});

export interface NavigationMenuTriggerProps extends VariantProps<typeof triggerVariants> {
  render?: React.ReactElement | ((props: any) => React.ReactElement);
  as?: React.ElementType;
  className?: string;
  children?: React.ReactNode;
  icon?: string | LucideIcon;
  iconPosition?: "left" | "right";
  disabled?: boolean;
} & Omit<React.ComponentProps<typeof BaseNavigationMenu.Trigger>, "className">;

const NavigationMenuTrigger = React.forwardRef<HTMLButtonElement, NavigationMenuTriggerProps>(
  ({ 
    className, 
    render, 
    as, 
    children, 
    variant,
    size,
    icon,
    iconPosition = "left",
    disabled = false,
    onMouseDown,
    ...props 
  }, ref) => {
    const [triggerRef, forceActiveHandlers] = useForceActive<HTMLButtonElement>(
      150,
      ref,
      onMouseDown ? { onMouseDown } : undefined
    );

    const DefaultElement = as || "button";
    const isButton = DefaultElement === "button";

    // Mapear size para size do √≠cone
    const getIconSize = React.useMemo(() => {
      switch (size) {
        case "sm":
          return "sm";
        case "lg":
          return "lg";
        default:
          return "default";
      }
    }, [size]);

    // Atributos de acessibilidade
    const accessibilityProps = React.useMemo(
      () => ({
        ...(!isButton && disabled && { "aria-disabled": true }),
        ...(!isButton && { role: "button", tabIndex: 0 }),
        ...(isButton && { disabled }),
        ...(icon && !children && { "aria-label": props["aria-label"] || "Menu item" }),
      }),
      [isButton, disabled, icon, children, props["aria-label"]]
    );

    // Handler de teclado
    const handleKeyDown = React.useCallback(
      (e: React.KeyboardEvent) => {
        if (
          !isButton &&
          (e.key === "Enter" || e.key === " ") &&
          props.onClick &&
          !disabled
        ) {
          e.preventDefault();
          props.onClick(e as any);
        }
      },
      [isButton, props.onClick, disabled]
    );

    const triggerClassName = React.useMemo(
      () => triggerVariants({ variant, size, className }),
      [variant, size, className]
    );

    const { children: triggerChildren, ...restProps } = props;

    // Conte√∫do do trigger
    const triggerContent = (
      <>
        {icon && iconPosition === "left" && (
          <Icon icon={icon} size={getIconSize} aria-hidden="true" />
        )}
        {children}
        {icon && iconPosition === "right" && (
          <Icon icon={icon} size={getIconSize} aria-hidden="true" />
        )}
        <BaseNavigationMenu.Icon className="ml-auto">
          <ChevronDownIcon />
        </BaseNavigationMenu.Icon>
      </>
    );

    const defaultProps = {
      ref: triggerRef,
      className: triggerClassName,
      onKeyDown: handleKeyDown,
      ...accessibilityProps,
      ...forceActiveHandlers,
      children: triggerContent,
    };

    const element = useRender({
      render: render || React.createElement(DefaultElement),
      props: mergeProps(defaultProps, restProps),
    });

    return (
      <BaseNavigationMenu.Trigger
        ref={triggerRef}
        className={triggerClassName}
        disabled={disabled}
        onKeyDown={handleKeyDown}
        {...accessibilityProps}
        {...forceActiveHandlers}
        {...restProps}
      >
        {triggerContent}
      </BaseNavigationMenu.Trigger>
    );
  }
);
NavigationMenuTrigger.displayName = "NavigationMenuTrigger";

// √çcone auxiliar
function ChevronDownIcon(props: React.ComponentProps<"svg">) {
  return (
    <svg width="10" height="10" viewBox="0 0 10 10" fill="none" {...props}>
      <path 
        d="M1 3.5L5 7.5L9 3.5" 
        stroke="currentColor" 
        strokeWidth="1.5" 
        strokeLinecap="round" 
        strokeLinejoin="round" 
      />
    </svg>
  );
}

export { NavigationMenuTrigger };
export type { NavigationMenuTriggerProps };
```

### 3. NavigationMenuContent.tsx

```typescript
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { NavigationMenu as BaseNavigationMenu } from "@base-ui-components/react/navigation-menu";
import { useRender } from "@base-ui-components/react/use-render";
import { mergeProps } from "@base-ui-components/react/merge-props";

const contentVariants = cva("surface high border-surface border-thin rounded-lg shadow-2xl p-4 min-w-[220px]", {
  variants: {
    size: {
      sm: "p-3 min-w-[180px]",
      md: "p-4 min-w-[220px]",
      lg: "p-5 min-w-[260px]",
    },
  },
  defaultVariants: {
    size: "md",
  },
});

export interface NavigationMenuContentProps extends VariantProps<typeof contentVariants> {
  render?: React.ReactElement | ((props: any) => React.ReactElement);
  as?: React.ElementType;
  className?: string;
  children?: React.ReactNode;
} & Omit<React.ComponentProps<typeof BaseNavigationMenu.Content>, "className">;

const NavigationMenuContent = React.forwardRef<HTMLElement, NavigationMenuContentProps>(
  ({ className, render, as, children, size, ...props }, ref) => {
    const DefaultElement = as || "div";

    const contentClassName = React.useMemo(
      () => contentVariants({ size, className }),
      [size, className]
    );

    const defaultProps = {
      ref,
      className: contentClassName,
      children,
    };

    const element = useRender({
      render: render || React.createElement(DefaultElement),
      props: mergeProps(defaultProps, { ...props }),
    });

    return (
      <BaseNavigationMenu.Content ref={ref} className={contentClassName} {...props}>
        {children}
      </BaseNavigationMenu.Content>
    );
  }
);
NavigationMenuContent.displayName = "NavigationMenuContent";

export { NavigationMenuContent };
export type { NavigationMenuContentProps };
```

### 4. NavigationMenuLink.tsx

```typescript
import * as React from "react";
import { NavigationMenu as BaseNavigationMenu } from "@base-ui-components/react/navigation-menu";
import { useRender } from "@base-ui-components/react/use-render";
import { mergeProps } from "@base-ui-components/react/merge-props";
import { Icon } from "../Icon";
import type { LucideIcon } from "lucide-react";

export interface NavigationMenuLinkProps {
  render?: React.ReactElement | ((props: any) => React.ReactElement);
  as?: React.ElementType;
  className?: string;
  children?: React.ReactNode;
  href: string;
  icon?: string | LucideIcon;
  title: string;
  description?: string;
} & Omit<React.ComponentProps<typeof BaseNavigationMenu.Link>, "className">;

const NavigationMenuLink = React.forwardRef<HTMLAnchorElement, NavigationMenuLinkProps>(
  ({ 
    className, 
    render, 
    as, 
    children, 
    href,
    icon,
    title,
    description,
    ...props 
  }, ref) => {
    const DefaultElement = as || "a";

    const defaultProps = {
      ref,
      href,
      className: "block p-3 rounded-md hover:surface-hover transition-colors",
      children: (
        <div className="flex items-center gap-x-3">
          {icon && (
            <Icon icon={icon} size="default" aria-hidden="true" />
          )}
          <div>
            <h3 className="typo title-2 font-semibold">
              {title}
            </h3>
            {description && (
              <p className="typo caption-1 text-tertiary mt-1">
                {description}
              </p>
            )}
          </div>
        </div>
      ),
    };

    const element = useRender({
      render: render || React.createElement(DefaultElement),
      props: mergeProps(defaultProps, { className, ...props }),
    });

    return (
      <BaseNavigationMenu.Link
        render={<a href={href} />}
        className={`block p-3 rounded-md hover:surface-hover transition-colors ${className || ""}`}
        ref={ref}
        {...props}
      >
        <div className="flex items-center gap-x-3">
          {icon && (
            <Icon icon={icon} size="default" aria-hidden="true" />
          )}
          <div>
            <h3 className="typo title-2 font-semibold">
              {title}
            </h3>
            {description && (
              <p className="typo caption-1 text-tertiary mt-1">
                {description}
              </p>
            )}
          </div>
        </div>
      </BaseNavigationMenu.Link>
    );
  }
);
NavigationMenuLink.displayName = "NavigationMenuLink";

export { NavigationMenuLink };
export type { NavigationMenuLinkProps };
```

### 5. index.tsx (Re-exports)

```typescript
// Re-exports dos componentes de navigation menu
export { NavigationMenu } from "./NavigationMenu";
export type { NavigationMenuProps } from "./NavigationMenu";

export { NavigationMenuTrigger } from "./NavigationMenuTrigger";
export type { NavigationMenuTriggerProps } from "./NavigationMenuTrigger";

export { NavigationMenuContent } from "./NavigationMenuContent";
export type { NavigationMenuContentProps } from "./NavigationMenuContent";

export { NavigationMenuLink } from "./NavigationMenuLink";
export type { NavigationMenuLinkProps } from "./NavigationMenuLink";

// Re-exports dos componentes base do Base UI
export { NavigationMenu as BaseNavigationMenu } from "@base-ui-components/react/navigation-menu";
```

### 6. app/components/base/NavigationMenu.tsx

```typescript
// Re-exports dos componentes de navigation menu
export { NavigationMenu } from "../custom/navigation-menu";
export type { NavigationMenuProps } from "../custom/navigation-menu";

export { NavigationMenuTrigger } from "../custom/navigation-menu";
export type { NavigationMenuTriggerProps } from "../custom/navigation-menu";

export { NavigationMenuContent } from "../custom/navigation-menu";
export type { NavigationMenuContentProps } from "../custom/navigation-menu";

export { NavigationMenuLink } from "../custom/navigation-menu";
export type { NavigationMenuLinkProps } from "../custom/navigation-menu";

// Re-exports dos componentes base do Base UI para uso direto
export { 
  NavigationMenu as BaseNavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuPortal,
  NavigationMenuPositioner,
  NavigationMenuPopup,
  NavigationMenuViewport,
  NavigationMenuArrow,
} from "@base-ui-components/react/navigation-menu";
```

## üìù Exemplos de Uso

### Exemplo 1: Menu Simples

```tsx
import { 
  NavigationMenu, 
  NavigationMenuList, 
  NavigationMenuItem,
  NavigationMenuTrigger,
  NavigationMenuContent,
  NavigationMenuLink 
} from "@/components/base/NavigationMenu";

function SimpleNavigationMenu() {
  return (
    <NavigationMenu>
      <NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuTrigger>Produtos</NavigationMenuTrigger>
          <NavigationMenuContent>
            <NavigationMenuLink 
              href="/produtos/software" 
              title="Software" 
              description="Solu√ß√µes de software empresarial"
            />
            <NavigationMenuLink 
              href="/produtos/hardware" 
              title="Hardware" 
              description="Equipamentos e dispositivos"
            />
            <NavigationMenuLink 
              href="/produtos/servicos" 
              title="Servi√ßos" 
              description="Consultoria e suporte t√©cnico"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
        
        <NavigationMenuItem>
          <NavigationMenuTrigger>Suporte</NavigationMenuTrigger>
          <NavigationMenuContent>
            <NavigationMenuLink 
              href="/suporte/documentacao" 
              title="Documenta√ß√£o" 
              description="Guias e tutoriais"
            />
            <NavigationMenuLink 
              href="/suporte/contato" 
              title="Contato" 
              description="Entre em contato conosco"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
        
        <NavigationMenuItem>
          <NavigationMenuLink href="/sobre" title="Sobre N√≥s" />
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  );
}
```

### Exemplo 2: Menu com √çcones

```tsx
import { 
  NavigationMenu, 
  NavigationMenuList, 
  NavigationMenuItem,
  NavigationMenuTrigger,
  NavigationMenuContent,
  NavigationMenuLink 
} from "@/components/base/NavigationMenu";

function NavigationMenuWithIcons() {
  return (
    <NavigationMenu variant="ghost" size="lg">
      <NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuTrigger 
            icon="Settings"
            iconPosition="left"
          >
            Configura√ß√µes
          </NavigationMenuTrigger>
          <NavigationMenuContent size="lg">
            <NavigationMenuLink 
              href="/config/perfil" 
              title="Perfil" 
              description="Gerencie suas informa√ß√µes pessoais"
              icon="User"
            />
            <NavigationMenuLink 
              href="/config/seguranca" 
              title="Seguran√ßa" 
              description="Configura√ß√µes de seguran√ßa e privacidade"
              icon="Shield"
            />
            <NavigationMenuLink 
              href="/config/notificacoes" 
              title="Notifica√ß√µes" 
              description="Prefer√™ncias de notifica√ß√£o"
              icon="Bell"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
        
        <NavigationMenuItem>
          <NavigationMenuTrigger 
            icon="Download"
            iconPosition="right"
          >
            Downloads
          </NavigationMenuTrigger>
          <NavigationMenuContent>
            <NavigationMenuLink 
              href="/downloads/software" 
              title="Software" 
              description="Downloads de software"
              icon="Package"
            />
            <NavigationMenuLink 
              href="/downloads/documentos" 
              title="Documentos" 
              description="Documenta√ß√£o para download"
              icon="FileText"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  );
}
```

### Exemplo 3: Menu Vertical

```tsx
import { 
  NavigationMenu, 
  NavigationMenuList, 
  NavigationMenuItem,
  NavigationMenuTrigger,
  NavigationMenuContent,
  NavigationMenuLink 
} from "@/components/base/NavigationMenu";

function VerticalNavigationMenu() {
  return (
    <NavigationMenu orientation="vertical" variant="outline">
      <NavigationMenuList orientation="vertical">
        <NavigationMenuItem>
          <NavigationMenuTrigger size="lg">
            Dashboard
          </NavigationMenuTrigger>
          <NavigationMenuContent>
            <NavigationMenuLink 
              href="/dashboard/overview" 
              title="Vis√£o Geral" 
              description="Resumo geral do sistema"
            />
            <NavigationMenuLink 
              href="/dashboard/analytics" 
              title="Analytics" 
              description="M√©tricas e relat√≥rios"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
        
        <NavigationMenuItem>
          <NavigationMenuTrigger size="lg">
            Usu√°rios
          </NavigationMenuTrigger>
          <NavigationMenuContent>
            <NavigationMenuLink 
              href="/usuarios/lista" 
              title="Lista de Usu√°rios" 
              description="Gerenciar usu√°rios do sistema"
            />
            <NavigationMenuLink 
              href="/usuarios/permissoes" 
              title="Permiss√µes" 
              description="Configurar permiss√µes de acesso"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  );
}
```

### Exemplo 4: Menu Customizado com Render Props

```tsx
import { 
  NavigationMenu, 
  NavigationMenuList, 
  NavigationMenuItem,
  NavigationMenuTrigger,
  NavigationMenuContent,
  NavigationMenuLink 
} from "@/components/base/NavigationMenu";
import { Link } from "react-router-dom";

function CustomNavigationMenu() {
  return (
    <NavigationMenu 
      render={<header className="bg-primary text-white" />}
      variant="ghost"
    >
      <NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuTrigger 
            render={<button className="custom-trigger" />}
            icon="Menu"
          >
            Menu Principal
          </NavigationMenuTrigger>
          <NavigationMenuContent 
            render={<div className="custom-content" />}
            size="lg"
          >
            <NavigationMenuLink 
              href="/home"
              title="In√≠cio"
              description="P√°gina inicial"
              render={<Link to="/home" />}
            />
            <NavigationMenuLink 
              href="/about"
              title="Sobre"
              description="Sobre nossa empresa"
              render={<Link to="/about" />}
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  );
}
```

### Exemplo 5: Menu com Estados e Intera√ß√µes

```tsx
import { useState } from "react";
import { 
  NavigationMenu, 
  NavigationMenuList, 
  NavigationMenuItem,
  NavigationMenuTrigger,
  NavigationMenuContent,
  NavigationMenuLink 
} from "@/components/base/NavigationMenu";

function InteractiveNavigationMenu() {
  const [activeMenu, setActiveMenu] = useState<string | null>(null);

  const handleValueChange = (value: any) => {
    setActiveMenu(value);
  };

  return (
    <NavigationMenu 
      onValueChange={handleValueChange}
      variant="default"
      size="md"
    >
      <NavigationMenuList>
        <NavigationMenuItem value="produtos">
          <NavigationMenuTrigger 
            disabled={false}
            icon="Package"
          >
            Produtos
          </NavigationMenuTrigger>
          <NavigationMenuContent>
            <NavigationMenuLink 
              href="/produtos/novos" 
              title="Novos Produtos" 
              description="Lan√ßamentos recentes"
            />
            <NavigationMenuLink 
              href="/produtos/populares" 
              title="Mais Populares" 
              description="Produtos em destaque"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
        
        <NavigationMenuItem value="servicos">
          <NavigationMenuTrigger 
            icon="Wrench"
          >
            Servi√ßos
          </NavigationMenuTrigger>
          <NavigationMenuContent>
            <NavigationMenuLink 
              href="/servicos/consultoria" 
              title="Consultoria" 
              description="Servi√ßos de consultoria especializada"
            />
            <NavigationMenuLink 
              href="/servicos/suporte" 
              title="Suporte T√©cnico" 
              description="Suporte 24/7"
            />
          </NavigationMenuContent>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  );
}
```

## üé® Variantes e Customiza√ß√£o

### Variantes Dispon√≠veis

#### NavigationMenu
- `variant`: `default` | `outline` | `ghost`
- `size`: `sm` | `md` | `lg`
- `orientation`: `horizontal` | `vertical`

#### NavigationMenuTrigger
- `variant`: `default` | `outline` | `ghost`
- `size`: `sm` | `md` | `lg`
- `iconPosition`: `left` | `right`
- `disabled`: `boolean`

#### NavigationMenuContent
- `size`: `sm` | `md` | `lg`

### Classes CSS Utilizadas

```css
/* Variantes do NavigationMenu */
.surface.brand          /* Variante padr√£o */
.ghost.border-surface.border-thin  /* Variante outline */
.ghost                  /* Variante ghost */

/* Tamanhos */
.h-6.px-2.text-sm      /* Tamanho sm */
.h-8.px-3.text-base    /* Tamanho md */
.h-10.px-4.text-lg     /* Tamanho lg */

/* Orienta√ß√£o */
.flex-row              /* Horizontal */
.flex-col              /* Vertical */

/* Trigger */
.foundation-button.interactive.font-medium.rounded-md.flex.items-center.gap-x-2

/* Content */
.surface.high.border-surface.border-thin.rounded-lg.shadow-2xl.p-4.min-w-[220px]

/* Link */
.block.p-3.rounded-md.hover:surface-hover.transition-colors
```

## ‚ôø Acessibilidade

### Atributos ARIA Autom√°ticos

- `aria-disabled`: Para elementos n√£o-button quando desabilitados
- `role="button"`: Para elementos customizados
- `tabIndex={0}`: Para navega√ß√£o por teclado
- `aria-label`: Para √≠cones sem texto
- `aria-hidden="true"`: Para √≠cones decorativos

### Navega√ß√£o por Teclado

- **Enter/Space**: Ativa triggers e links
- **Arrow Keys**: Navega entre itens
- **Escape**: Fecha submenus
- **Tab**: Navega√ß√£o normal

### Estados de Foco

- Foco visual claro com `:focus-visible`
- Estados de hover e active
- Feedback visual para intera√ß√µes

## üîß Integra√ß√£o com Sistema de Design

### Classes Utilizadas

```css
/* Surface System */
.surface.brand          /* Superf√≠cie principal */
.surface.high           /* Superf√≠cie elevada */
.surface.ghost          /* Superf√≠cie transparente */

/* Typography */
.typo.title-2           /* T√≠tulos */
.typo.caption-1         /* Descri√ß√µes */
.text-tertiary          /* Texto terci√°rio */

/* Interactive */
.interactive            /* Estados de intera√ß√£o */
.hover:surface-hover    /* Hover state */

/* Borders */
.border-surface.border-thin  /* Bordas */
.rounded-md             /* Border radius */

/* Shadows */
.shadow-2xl             /* Sombras */
```

## üß™ Testes Recomendados

### Testes Unit√°rios

```typescript
// NavigationMenu.test.tsx
describe('NavigationMenu', () => {
  it('should render with default props', () => {
    // Teste b√°sico de renderiza√ß√£o
  });

  it('should apply custom className', () => {
    // Teste de customiza√ß√£o
  });

  it('should handle orientation changes', () => {
    // Teste de orienta√ß√£o
  });
});

// NavigationMenuTrigger.test.tsx
describe('NavigationMenuTrigger', () => {
  it('should render with icon', () => {
    // Teste de √≠cones
  });

  it('should handle disabled state', () => {
    // Teste de estado desabilitado
  });

  it('should support keyboard navigation', () => {
    // Teste de acessibilidade
  });
});
```

### Testes de Integra√ß√£o

```typescript
// NavigationMenu.integration.test.tsx
describe('NavigationMenu Integration', () => {
  it('should open and close submenus', () => {
    // Teste de intera√ß√£o
  });

  it('should handle multiple menu items', () => {
    // Teste de m√∫ltiplos itens
  });

  it('should work with React Router', () => {
    // Teste de integra√ß√£o com router
  });
});
```

## üìö Documenta√ß√£o da API

### NavigationMenu Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `variant` | `'default' \| 'outline' \| 'ghost'` | `'default'` | Estilo visual do menu |
| `size` | `'sm' \| 'md' \| 'lg'` | `'md'` | Tamanho dos itens |
| `orientation` | `'horizontal' \| 'vertical'` | `'horizontal'` | Orienta√ß√£o do menu |
| `delay` | `number` | `50` | Delay para abrir submenus (ms) |
| `closeDelay` | `number` | `50` | Delay para fechar submenus (ms) |
| `onValueChange` | `function` | `undefined` | Callback quando valor muda |
| `render` | `ReactElement \| function` | `undefined` | Elemento customizado |
| `as` | `ElementType` | `'nav'` | Elemento HTML |
| `className` | `string` | `undefined` | Classe CSS adicional |

### NavigationMenuTrigger Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `variant` | `'default' \| 'outline' \| 'ghost'` | `'default'` | Estilo visual |
| `size` | `'sm' \| 'md' \| 'lg'` | `'md'` | Tamanho do trigger |
| `icon` | `string \| LucideIcon` | `undefined` | √çcone do trigger |
| `iconPosition` | `'left' \| 'right'` | `'left'` | Posi√ß√£o do √≠cone |
| `disabled` | `boolean` | `false` | Estado desabilitado |
| `render` | `ReactElement \| function` | `undefined` | Elemento customizado |
| `as` | `ElementType` | `'button'` | Elemento HTML |

### NavigationMenuContent Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `size` | `'sm' \| 'md' \| 'lg'` | `'md'` | Tamanho do conte√∫do |
| `render` | `ReactElement \| function` | `undefined` | Elemento customizado |
| `as` | `ElementType` | `'div'` | Elemento HTML |
| `className` | `string` | `undefined` | Classe CSS adicional |

### NavigationMenuLink Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `href` | `string` | **required** | URL do link |
| `title` | `string` | **required** | T√≠tulo do link |
| `description` | `string` | `undefined` | Descri√ß√£o do link |
| `icon` | `string \| LucideIcon` | `undefined` | √çcone do link |
| `render` | `ReactElement \| function` | `undefined` | Elemento customizado |
| `as` | `ElementType` | `'a'` | Elemento HTML |

## üöÄ Roadmap e Melhorias Futuras

### Fase 1: Implementa√ß√£o B√°sica ‚úÖ
- [x] Estrutura de componentes
- [x] Variantes b√°sicas
- [x] Acessibilidade essencial
- [x] Integra√ß√£o com sistema de design

### Fase 2: Funcionalidades Avan√ßadas üîÑ
- [ ] Suporte a aninhamento m√∫ltiplo
- [ ] Anima√ß√µes customizadas
- [ ] Temas din√¢micos
- [ ] Internacionaliza√ß√£o

### Fase 3: Otimiza√ß√µes üéØ
- [ ] Lazy loading de submenus
- [ ] Virtualiza√ß√£o para menus grandes
- [ ] Performance optimizations
- [ ] Bundle size reduction

### Fase 4: Extens√µes üîß
- [ ] Breadcrumb integration
- [ ] Search functionality
- [ ] Keyboard shortcuts
- [ ] Mobile optimizations

## üìã Checklist de Implementa√ß√£o

### Setup Inicial
- [ ] Criar pasta `app/components/custom/navigation-menu/`
- [ ] Criar arquivos de componentes
- [ ] Configurar re-exports
- [ ] Adicionar ao `app/components/base/NavigationMenu.tsx`

### Componentes
- [ ] NavigationMenu.tsx
- [ ] NavigationMenuTrigger.tsx
- [ ] NavigationMenuContent.tsx
- [ ] NavigationMenuLink.tsx
- [ ] index.tsx

### Testes
- [ ] Testes unit√°rios b√°sicos
- [ ] Testes de acessibilidade
- [ ] Testes de integra√ß√£o
- [ ] Testes de performance

### Documenta√ß√£o
- [ ] README.md
- [ ] Exemplos de uso
- [ ] API documentation
- [ ] Migration guide

### Integra√ß√£o
- [ ] Verificar compatibilidade com React Router
- [ ] Testar com diferentes temas
- [ ] Validar acessibilidade
- [ ] Performance testing

## üéØ Conclus√£o

Esta implementa√ß√£o do NavigationMenu segue os padr√µes estabelecidos no projeto, oferecendo:

1. **Flexibilidade m√°xima** atrav√©s de composi√ß√£o e render props
2. **Consist√™ncia** com o sistema de design existente
3. **Acessibilidade completa** seguindo padr√µes WCAG
4. **Performance otimizada** com memoiza√ß√£o e lazy loading
5. **DX excelente** com TypeScript e autocomplete
6. **Manutenibilidade** atrav√©s de estrutura modular

O componente est√° pronto para uso em produ√ß√£o e pode ser facilmente estendido conforme as necessidades do projeto evoluem. 